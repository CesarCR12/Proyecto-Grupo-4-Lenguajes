---PROYECTO FINAL / GRUPO 4---

--------------------------------------------CREACION DE TABLAS--------------------------------------------
---TABLA DE ESTADOS
CREATE TABLE FIDE_ESTADOS_TB (
    FIDE_ESTADOS_TB_ID_ESTADOS_PK VARCHAR2(200),
    DESCRIPCION VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_ESTADOS_TB_PK PRIMARY KEY (FIDE_ESTADOS_TB_ID_ESTADOS_PK) 
    USING INDEX (CREATE INDEX FIDE_ESTADOS_TB_IDESTADOS_IDX ON FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK))
);

---TABLA DE PAIS
CREATE TABLE FIDE_PAIS_TB (
    FIDE_PAIS_TB_ID_PAIS_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_PAIS_TB_PK PRIMARY KEY (FIDE_PAIS_TB_ID_PAIS_PK)
    USING INDEX (CREATE INDEX FIDE_PAIS_TB_IDPAIS_IDX ON FIDE_PAIS_TB(FIDE_PAIS_TB_ID_PAIS_PK)),
    CONSTRAINT FIDE_PAIS_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);


---TABLA DE PROVINCIA
CREATE TABLE FIDE_PROVINCIA_TB (
    FIDE_PROVINCIA_TB_ID_PROVINCIA_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_PROVINCIA_TB_PK PRIMARY KEY (FIDE_PROVINCIA_TB_ID_PROVINCIA_PK)
    USING INDEX (CREATE INDEX FIDE_PROVINCIA_TB_IDPROVINCIA_IDX ON FIDE_PROVINCIA_TB(FIDE_PROVINCIA_TB_ID_PROVINCIA_PK)),
    CONSTRAINT FIDE_PROVINCIA_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);

---TABLA DE CANTON
CREATE TABLE FIDE_CANTON_TB (
    FIDE_CANTON_TB_ID_CANTON_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_CANTON_TB_PK PRIMARY KEY (FIDE_CANTON_TB_ID_CANTON_PK)
    USING INDEX (CREATE INDEX FIDE_CANTON_TB_IDCANTON_IDX ON FIDE_CANTON_TB(FIDE_CANTON_TB_ID_CANTON_PK)),
    CONSTRAINT FIDE_CANTON_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);


---TABLA DE DISTRITO
CREATE TABLE FIDE_DISTRITO_TB (
    FIDE_DISTRITO_TB_ID_DISTRITO_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_DISTRITO_TB_PK PRIMARY KEY (FIDE_DISTRITO_TB_ID_DISTRITO_PK)
    USING INDEX (CREATE INDEX FIDE_DISTRITO_TB_IDDISTRITO_IDX ON FIDE_DISTRITO_TB(FIDE_DISTRITO_TB_ID_DISTRITO_PK)),
    CONSTRAINT FIDE_DISTRITO_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);


---TABLA DE PROVEEDORES
CREATE TABLE FIDE_PROVEEDORES_TB (
    FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    ID_PAIS VARCHAR2(200),
    ID_PROVINCIA VARCHAR2(200),
    ID_CANTON VARCHAR2(200),
    ID_DISTRITO VARCHAR2(200),
    DIRECCION VARCHAR(255),
    NOMBRE_PROVEEDOR VARCHAR(255),
    TELEFONO VARCHAR(20),
    CORREO VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_PROVEEDORES_TB_PK PRIMARY KEY (FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK)
    USING INDEX (CREATE INDEX FIDE_PROVEEDORES_TB_IDPROVEEDORES_IDX ON FIDE_PROVEEDORES_TB(FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK)),
    CONSTRAINT FIDE_PROVEEDORES_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK),
    CONSTRAINT FIDE_PROVEEDORES_TB_PAIS_FK FOREIGN KEY (ID_PAIS) 
    REFERENCES FIDE_PAIS_TB(FIDE_PAIS_TB_ID_PAIS_PK),
    CONSTRAINT FIDE_PROVEEDORES_TB_PROVINCIA_FK FOREIGN KEY (ID_PROVINCIA) 
    REFERENCES FIDE_PROVINCIA_TB(FIDE_PROVINCIA_TB_ID_PROVINCIA_PK),
    CONSTRAINT FIDE_PROVEEDORES_TB_CANTON_FK FOREIGN KEY (ID_CANTON) 
    REFERENCES FIDE_CANTON_TB(FIDE_CANTON_TB_ID_CANTON_PK),
    CONSTRAINT FIDE_PROVEEDORES_TB_DISTRITO_FK FOREIGN KEY (ID_DISTRITO) 
    REFERENCES FIDE_DISTRITO_TB(FIDE_DISTRITO_TB_ID_DISTRITO_PK)
);

---TABLA DE CLIENTES
CREATE TABLE FIDE_CLIENTES_TB (
    FIDE_CLIENTES_TB_ID_CLIENTE_PK VARCHAR2(200),
    ID_PAIS VARCHAR2(200),
    ID_PROVINCIA VARCHAR2(200),
    ID_CANTON VARCHAR2(200),
    ID_DISTRITO VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    CORREO VARCHAR(255),
    CONTRASENA VARCHAR2(50),
    DIRECCION VARCHAR(255),
    TELEFONO VARCHAR(20),
    ROL VARCHAR2(10),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_CLIENTES_TB_PK PRIMARY KEY (FIDE_CLIENTES_TB_ID_CLIENTE_PK)
    USING INDEX (CREATE INDEX FIDE_CLIENTES_TB_IDCLIENTE_IDX ON FIDE_CLIENTES_TB(FIDE_CLIENTES_TB_ID_CLIENTE_PK)),
    CONSTRAINT FIDE_CLIENTES_TB_PAIS_FK FOREIGN KEY (ID_PAIS) 
    REFERENCES FIDE_PAIS_TB(FIDE_PAIS_TB_ID_PAIS_PK),
    CONSTRAINT FIDE_CLIENTES_TB_PROVINCIA_FK FOREIGN KEY (ID_PROVINCIA) 
    REFERENCES FIDE_PROVINCIA_TB(FIDE_PROVINCIA_TB_ID_PROVINCIA_PK),
    CONSTRAINT FIDE_CLIENTES_TB_CANTON_FK FOREIGN KEY (ID_CANTON) 
    REFERENCES FIDE_CANTON_TB(FIDE_CANTON_TB_ID_CANTON_PK),
    CONSTRAINT FIDE_CLIENTES_TB_DISTRITO_FK FOREIGN KEY (ID_DISTRITO) 
    REFERENCES FIDE_DISTRITO_TB(FIDE_DISTRITO_TB_ID_DISTRITO_PK),
    CONSTRAINT FIDE_CLIENTES_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);

---TABLA DE PALLETS
CREATE TABLE FIDE_PALLETS_TB (
    FIDE_PALLETS_TB_ID_PALLET_PK VARCHAR2(200),
    ID_PROVEEDORES VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    DESCRIPCION VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_PALLETS_TB_PK PRIMARY KEY (FIDE_PALLETS_TB_ID_PALLET_PK)
    USING INDEX (CREATE INDEX FIDE_PALLETS_TB_IDPALLET_IDX ON FIDE_PALLETS_TB(FIDE_PALLETS_TB_ID_PALLET_PK)),
    CONSTRAINT FIDE_PALLETS_TB_PROVEEDORES_FK FOREIGN KEY (ID_PROVEEDORES) 
    REFERENCES FIDE_PROVEEDORES_TB(FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK),
    CONSTRAINT FIDE_PALLETS_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);


---TABLA DE INVENTARIO
CREATE TABLE FIDE_INVENTARIO_TB (
    FIDE_INVENTARIO_TB_ID_INVENTARIO_PK VARCHAR2(200),
    ID_PALLET VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    CANTIDAD INT,
    PRECIO DECIMAL(10, 2),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_INVENTARIO_TB_PK PRIMARY KEY (FIDE_INVENTARIO_TB_ID_INVENTARIO_PK)
    USING INDEX (CREATE INDEX FIDE_INVENTARIO_TB_IDINVENTARIO_IDX ON FIDE_INVENTARIO_TB(FIDE_INVENTARIO_TB_ID_INVENTARIO_PK)),
    CONSTRAINT FIDE_INVENTARIO_TB_PALLET_FK FOREIGN KEY (ID_PALLET) 
    REFERENCES FIDE_PALLETS_TB(FIDE_PALLETS_TB_ID_PALLET_PK),
    CONSTRAINT FIDE_INVENTARIO_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);

---TABLA DE TIPO DESCUENTO
CREATE TABLE FIDE_TIPO_DESCUENTO_TB (
    FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE VARCHAR(255),
    DESCRIPCION VARCHAR(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_TIPO_DESCUENTO_TB_PK PRIMARY KEY (FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK)
    USING INDEX (CREATE INDEX FIDE_TIPO_DESCUENTO_TB_IDTIPODESC_IDX ON FIDE_TIPO_DESCUENTO_TB(FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK)),
    CONSTRAINT FIDE_TIPO_DESCUENTO_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);

---TABLA DE DESCUENTO
CREATE TABLE FIDE_DESCUENTO_TB (
    FIDE_DESCUENTO_TB_ID_DESCUENTO_PK VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    ID_TIPO_DESCUENTO VARCHAR2(200),
    VALOR DECIMAL(10, 2),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_DESCUENTO_TB_PK PRIMARY KEY (FIDE_DESCUENTO_TB_ID_DESCUENTO_PK)
    USING INDEX (CREATE INDEX FIDE_DESCUENTO_TB_IDDESCUENTO_IDX ON FIDE_DESCUENTO_TB(FIDE_DESCUENTO_TB_ID_DESCUENTO_PK)),
    CONSTRAINT FIDE_DESCUENTO_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK),
    CONSTRAINT FIDE_DESCUENTO_TB_TIPO_DESCUENTO_FK FOREIGN KEY (ID_TIPO_DESCUENTO) 
    REFERENCES FIDE_TIPO_DESCUENTO_TB(FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK)
);

---TABLA DE PROMOCIONES
CREATE TABLE FIDE_PROMOCIONES_TB (
    FIDE_PROMOCIONES_TB_ID_PROMOCION_PK VARCHAR2(200),
    ID_FACTURAS VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    NOMBRE_PROMOCION VARCHAR2(255),
    FECHA_INICIO DATE,
    FECHA_FIN DATE,
    DESCRIPCION VARCHAR2(255),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_PROMOCIONES_TB_PK PRIMARY KEY (FIDE_PROMOCIONES_TB_ID_PROMOCION_PK)
    USING INDEX (CREATE INDEX FIDE_PROMOCIONES_TB_IDPROMOCION_IDX ON FIDE_PROMOCIONES_TB(FIDE_PROMOCIONES_TB_ID_PROMOCION_PK)),
    CONSTRAINT FIDE_PROMOCIONES_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
        REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK)
);

---TABLA DE FACTURAS
CREATE TABLE FIDE_FACTURAS_TB (
    FIDE_FACTURAS_TB_ID_FACTURAS_PK VARCHAR2(200),
    ID_INVENTARIO VARCHAR2(200),
    ID_DESCUENTO VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    ID_CLIENTE VARCHAR2(200),
    ID_PROMOCION VARCHAR2(200),
    FECHA_VENTA DATE,
    TOTAL_VENTA DECIMAL(10, 2),
    SUBTOTAL DECIMAL(10, 2),
    IMPUESTOS DECIMAL(10, 2),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_FACTURAS_TB_PK PRIMARY KEY (FIDE_FACTURAS_TB_ID_FACTURAS_PK)
    USING INDEX (CREATE INDEX FIDE_FACTURAS_TB_IDFACTURAS_IDX ON FIDE_FACTURAS_TB(FIDE_FACTURAS_TB_ID_FACTURAS_PK)),
    CONSTRAINT FIDE_FACTURAS_TB_INVENTARIO_FK FOREIGN KEY (ID_INVENTARIO) 
    REFERENCES FIDE_INVENTARIO_TB(FIDE_INVENTARIO_TB_ID_INVENTARIO_PK),
    CONSTRAINT FIDE_FACTURAS_TB_DESCUENTO_FK FOREIGN KEY (ID_DESCUENTO) 
    REFERENCES FIDE_DESCUENTO_TB(FIDE_DESCUENTO_TB_ID_DESCUENTO_PK),
    CONSTRAINT FIDE_FACTURAS_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
    REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK),
    CONSTRAINT FIDE_FACTURAS_TB_CLIENTES_FK FOREIGN KEY (ID_CLIENTE) 
    REFERENCES FIDE_CLIENTES_TB(FIDE_CLIENTES_TB_ID_CLIENTE_PK),
    CONSTRAINT FIDE_FACTURAS_TB_PROMOCION_FK FOREIGN KEY (ID_PROMOCION) 
    REFERENCES FIDE_PROMOCIONES_TB(FIDE_PROMOCIONES_TB_ID_PROMOCION_PK)
);


---TABLA DE DETALLES FACTURAS
CREATE TABLE FIDE_DETALLES_FACTURAS_TB (
    FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK VARCHAR2(200),
    ID_FACTURAS VARCHAR2(200),
    ID_ESTADOS VARCHAR2(200),
    ID_INVENTARIO VARCHAR2(200),
    CANTIDAD_VENDIDA INT,
    PRECIO_UNITARIO DECIMAL(10, 2),
    PRECIO_TOTAL_UNITARIO DECIMAL(10, 2),
    CREADO_POR VARCHAR2(100),
    FECHA_CREACION TIMESTAMP,
    MODIFICADO_POR VARCHAR2(100),
    FECHA_MODIFICACION TIMESTAMP,
    ESTADO VARCHAR2(10),
    ACCION VARCHAR2(100),
    CONSTRAINT FIDE_DETALLES_FACTURAS_TB_PK PRIMARY KEY (FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK)
    USING INDEX (CREATE INDEX FIDE_DETALLES_FACTURAS_TB_IDDETALLE_IDX ON FIDE_DETALLES_FACTURAS_TB(FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK)),
    CONSTRAINT FIDE_DETALLES_FACTURAS_TB_FACTURAS_FK FOREIGN KEY (ID_FACTURAS) 
        REFERENCES FIDE_FACTURAS_TB(FIDE_FACTURAS_TB_ID_FACTURAS_PK),
    CONSTRAINT FIDE_DETALLES_FACTURAS_TB_ESTADOS_FK FOREIGN KEY (ID_ESTADOS) 
        REFERENCES FIDE_ESTADOS_TB(FIDE_ESTADOS_TB_ID_ESTADOS_PK),
    CONSTRAINT FIDE_DETALLES_FACTURAS_TB_INVENTARIO_FK FOREIGN KEY (ID_INVENTARIO) 
        REFERENCES FIDE_INVENTARIO_TB(FIDE_INVENTARIO_TB_ID_INVENTARIO_PK)
);

--------------------------------------------INSERTS A LAS TABLAS--------------------------------------------
---INSERTS TABLA ESTADOS
INSERT INTO FIDE_ESTADOS_TB (FIDE_ESTADOS_TB_ID_ESTADOS_PK, DESCRIPCION) VALUES ('1', 'Activo');
INSERT INTO FIDE_ESTADOS_TB (FIDE_ESTADOS_TB_ID_ESTADOS_PK, DESCRIPCION) VALUES ('2', 'Inactivo');
COMMIT;

---INSERTS TABLA PAIS
INSERT INTO FIDE_PAIS_TB (FIDE_PAIS_TB_ID_PAIS_PK, ID_ESTADOS, NOMBRE) VALUES ('CR', '1', 'Costa Rica');
COMMIT;

---INSERTS TABLA PROVINCIA
INSERT INTO FIDE_PROVINCIA_TB (FIDE_PROVINCIA_TB_ID_PROVINCIA_PK, ID_ESTADOS, NOMBRE) VALUES ('SJ', '1', 'San José');
INSERT INTO FIDE_PROVINCIA_TB (FIDE_PROVINCIA_TB_ID_PROVINCIA_PK, ID_ESTADOS, NOMBRE) VALUES ('AL', '1', 'Alajuela');
INSERT INTO FIDE_PROVINCIA_TB (FIDE_PROVINCIA_TB_ID_PROVINCIA_PK, ID_ESTADOS, NOMBRE) VALUES ('CA', '1', 'Cartago');
INSERT INTO FIDE_PROVINCIA_TB (FIDE_PROVINCIA_TB_ID_PROVINCIA_PK, ID_ESTADOS, NOMBRE) VALUES ('HE', '1', 'Heredia');
COMMIT;


---INSERTS TABLA CANTON
INSERT INTO FIDE_CANTON_TB (FIDE_CANTON_TB_ID_CANTON_PK, ID_ESTADOS, NOMBRE) VALUES ('ES', '1', 'Escazú');
INSERT INTO FIDE_CANTON_TB (FIDE_CANTON_TB_ID_CANTON_PK, ID_ESTADOS, NOMBRE) VALUES ('AT', '1', 'Atenas');
INSERT INTO FIDE_CANTON_TB (FIDE_CANTON_TB_ID_CANTON_PK, ID_ESTADOS, NOMBRE) VALUES ('PA', '1', 'Paraiso');
INSERT INTO FIDE_CANTON_TB (FIDE_CANTON_TB_ID_CANTON_PK, ID_ESTADOS, NOMBRE) VALUES ('BE', '1', 'Belen');
INSERT INTO FIDE_CANTON_TB (FIDE_CANTON_TB_ID_CANTON_PK, ID_ESTADOS, NOMBRE) VALUES ('SA', '1', 'SanRafael');
COMMIT;

---INSERTS TABLA DISTRITO
INSERT INTO FIDE_DISTRITO_TB (FIDE_DISTRITO_TB_ID_DISTRITO_PK, ID_ESTADOS, NOMBRE) VALUES ('SAN', '1', 'San Antonio');
INSERT INTO FIDE_DISTRITO_TB (FIDE_DISTRITO_TB_ID_DISTRITO_PK, ID_ESTADOS, NOMBRE) VALUES ('ME', '1', 'Mercedes');
INSERT INTO FIDE_DISTRITO_TB (FIDE_DISTRITO_TB_ID_DISTRITO_PK, ID_ESTADOS, NOMBRE) VALUES ('OR', '1', 'Orosi');
INSERT INTO FIDE_DISTRITO_TB (FIDE_DISTRITO_TB_ID_DISTRITO_PK, ID_ESTADOS, NOMBRE) VALUES ('LA', '1', 'La Ribera');
COMMIT;

---INSERTS TABLA PROVEEDORES
INSERT INTO FIDE_PROVEEDORES_TB (FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK, ID_ESTADOS, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, DIRECCION, NOMBRE_PROVEEDOR, TELEFONO, CORREO) 
VALUES ('1', '1', 'CR', 'SJ', 'ES', 'SAN', 'Calle 123', 'Proveedor 1', '1234567890', 'proveedor1@example.com');
INSERT INTO FIDE_PROVEEDORES_TB (FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK, ID_ESTADOS, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, DIRECCION, NOMBRE_PROVEEDOR, TELEFONO, CORREO) 
VALUES ('2', '1', 'CR', 'AL', 'AT', 'ME', 'Avenida 456', 'Proveedor 2', '0987654321', 'proveedor2@example.com');
INSERT INTO FIDE_PROVEEDORES_TB (FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK, ID_ESTADOS, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, DIRECCION, NOMBRE_PROVEEDOR, TELEFONO, CORREO) 
VALUES ('3', '1', 'CR', 'CA', 'PA', 'OR', 'Boulevard 789', 'Proveedor 3', '1122334455', 'proveedor3@example.com');
COMMIT;

---INSERTS TABLA CLIENTES
INSERT INTO FIDE_CLIENTES_TB (FIDE_CLIENTES_TB_ID_CLIENTE_PK, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, ID_ESTADOS, NOMBRE, CORREO, DIRECCION, TELEFONO, CONTRASENA) 
VALUES ('1', 'CR', 'SJ', 'ES', 'SAN', '1', 'Cesar', 'Cesar@example.com', 'Calle 123', '87026789', '12345');
INSERT INTO FIDE_CLIENTES_TB (FIDE_CLIENTES_TB_ID_CLIENTE_PK, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, ID_ESTADOS, NOMBRE, CORREO, DIRECCION, TELEFONO, CONTRASENA)  
VALUES ('2', 'CR', 'AL', 'AT', 'ME', '1', 'Esteban', 'Esteban@example.com', 'Avenida 456', '85643567', '12345');
INSERT INTO FIDE_CLIENTES_TB (FIDE_CLIENTES_TB_ID_CLIENTE_PK, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, ID_ESTADOS, NOMBRE, CORREO, DIRECCION, TELEFONO, CONTRASENA)  
VALUES ('3', 'CR', 'CA', 'PA', 'OR', '1', 'Alexandra', 'Alexandra@example.com', 'Calle 789', '88456789', '12345');
COMMIT;

---INSERTS TABLA PALLETS
INSERT INTO FIDE_PALLETS_TB (FIDE_PALLETS_TB_ID_PALLET_PK, ID_PROVEEDORES, ID_ESTADOS, DESCRIPCION) 
VALUES ('1', '1', '1', 'Pallet 1');
INSERT INTO FIDE_PALLETS_TB (FIDE_PALLETS_TB_ID_PALLET_PK, ID_PROVEEDORES, ID_ESTADOS, DESCRIPCION) 
VALUES ('2', '2', '1', 'Pallet 2');
INSERT INTO FIDE_PALLETS_TB (FIDE_PALLETS_TB_ID_PALLET_PK, ID_PROVEEDORES, ID_ESTADOS, DESCRIPCION) 
VALUES ('3', '3', '1', 'Pallet 3');
COMMIT;


---INSERTS TABLA INVENTARIO
INSERT INTO FIDE_INVENTARIO_TB (FIDE_INVENTARIO_TB_ID_INVENTARIO_PK, ID_PALLET, ID_ESTADOS, NOMBRE, CANTIDAD, PRECIO) 
VALUES ('1', '1', '1', 'Maleta', 3, 25.00);
INSERT INTO FIDE_INVENTARIO_TB (FIDE_INVENTARIO_TB_ID_INVENTARIO_PK, ID_PALLET, ID_ESTADOS, NOMBRE, CANTIDAD, PRECIO) 
VALUES ('2', '2', '1', 'Silla', 2, 20.75);
INSERT INTO FIDE_INVENTARIO_TB (FIDE_INVENTARIO_TB_ID_INVENTARIO_PK, ID_PALLET, ID_ESTADOS, NOMBRE, CANTIDAD, PRECIO) 
VALUES ('3', '3', '1', 'Armario', 4, 30.00);
COMMIT;


---INSERTS TABLA TIPO DESCUENTO
INSERT INTO FIDE_TIPO_DESCUENTO_TB (FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK, ID_ESTADOS, NOMBRE, DESCRIPCION) 
VALUES ('1', '1', 'Descuento por tiempo', 'Descuento aplicado por ofertas en tiempo limitado');
INSERT INTO FIDE_TIPO_DESCUENTO_TB (FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK, ID_ESTADOS, NOMBRE, DESCRIPCION) 
VALUES ('2', '1', 'Descuento por Temporada', 'Descuento aplicado durante temporadas específicas');
INSERT INTO FIDE_TIPO_DESCUENTO_TB (FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK, ID_ESTADOS, NOMBRE, DESCRIPCION) 
VALUES ('3', '1', 'Descuento Promocional', 'Descuento aplicado durante promociones especiales');
COMMIT;

---INSERTS TABLA DESCUENTO
INSERT INTO FIDE_DESCUENTO_TB (FIDE_DESCUENTO_TB_ID_DESCUENTO_PK, ID_ESTADOS, ID_TIPO_DESCUENTO, VALOR) 
VALUES ('1', '1', '1', 5.00);
INSERT INTO FIDE_DESCUENTO_TB (FIDE_DESCUENTO_TB_ID_DESCUENTO_PK, ID_ESTADOS, ID_TIPO_DESCUENTO, VALOR) 
VALUES ('2', '1', '2', 4.00);
INSERT INTO FIDE_DESCUENTO_TB (FIDE_DESCUENTO_TB_ID_DESCUENTO_PK, ID_ESTADOS, ID_TIPO_DESCUENTO, VALOR) 
VALUES ('3', '1', '3', 2.00);
COMMIT;

---INSERTS TABLA PROMOCIONES
INSERT INTO FIDE_PROMOCIONES_TB (FIDE_PROMOCIONES_TB_ID_PROMOCION_PK, ID_FACTURAS, ID_ESTADOS, NOMBRE_PROMOCION, FECHA_INICIO, FECHA_FIN, DESCRIPCION) 
VALUES ('1', '1', '1', 'Promoción de Verano', TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2024-08-31', 'YYYY-MM-DD'), 'Descuento especial de verano');
INSERT INTO FIDE_PROMOCIONES_TB (FIDE_PROMOCIONES_TB_ID_PROMOCION_PK, ID_FACTURAS, ID_ESTADOS, NOMBRE_PROMOCION, FECHA_INICIO, FECHA_FIN, DESCRIPCION) 
VALUES ('2', '2', '1', 'Promoción de Invierno', TO_DATE('2024-12-01', 'YYYY-MM-DD'), TO_DATE('2025-02-28', 'YYYY-MM-DD'), 'Descuento especial de invierno');
INSERT INTO FIDE_PROMOCIONES_TB (FIDE_PROMOCIONES_TB_ID_PROMOCION_PK, ID_FACTURAS, ID_ESTADOS, NOMBRE_PROMOCION, FECHA_INICIO, FECHA_FIN, DESCRIPCION) 
VALUES ('3', '3', '1', 'Promoción de Primavera', TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-05-31', 'YYYY-MM-DD'), 'Descuento especial de primavera');
COMMIT;

---INSERTS TABLA FACTURAS
INSERT INTO FIDE_FACTURAS_TB (FIDE_FACTURAS_TB_ID_FACTURAS_PK, ID_INVENTARIO, ID_DESCUENTO, ID_ESTADOS, ID_CLIENTE, ID_PROMOCION, FECHA_VENTA, TOTAL_VENTA, SUBTOTAL, IMPUESTOS) 
VALUES ('1', '1', '1', '1', '1', '1', TO_DATE('2024-06-15', 'YYYY-MM-DD'), 100.00, 90.00, 10.00);
INSERT INTO FIDE_FACTURAS_TB (FIDE_FACTURAS_TB_ID_FACTURAS_PK, ID_INVENTARIO, ID_DESCUENTO, ID_ESTADOS, ID_CLIENTE, ID_PROMOCION, FECHA_VENTA, TOTAL_VENTA, SUBTOTAL, IMPUESTOS) 
VALUES ('2', '2', '2', '1', '2', '2', TO_DATE('2024-12-20', 'YYYY-MM-DD'), 200.00, 170.00, 30.00);
INSERT INTO FIDE_FACTURAS_TB (FIDE_FACTURAS_TB_ID_FACTURAS_PK, ID_INVENTARIO, ID_DESCUENTO, ID_ESTADOS, ID_CLIENTE, ID_PROMOCION, FECHA_VENTA, TOTAL_VENTA, SUBTOTAL, IMPUESTOS) 
VALUES ('3', '3', '3', '1', '3', '3', TO_DATE('2024-03-10', 'YYYY-MM-DD'), 300.00, 240.00, 60.00);
COMMIT;

---INSERTS TABLA DETALLES FACTURAS
INSERT INTO FIDE_DETALLES_FACTURAS_TB (FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK, ID_FACTURAS, ID_ESTADOS, ID_INVENTARIO, CANTIDAD_VENDIDA, PRECIO_UNITARIO, PRECIO_TOTAL_UNITARIO) 
VALUES ('1', '1', '1', '1', 10, 9.00, 90.00);
INSERT INTO FIDE_DETALLES_FACTURAS_TB (FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK, ID_FACTURAS, ID_ESTADOS, ID_INVENTARIO, CANTIDAD_VENDIDA, PRECIO_UNITARIO, PRECIO_TOTAL_UNITARIO) 
VALUES ('2', '2', '1', '2', 20, 8.50, 170.00);
INSERT INTO FIDE_DETALLES_FACTURAS_TB (FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK, ID_FACTURAS, ID_ESTADOS, ID_INVENTARIO, CANTIDAD_VENDIDA, PRECIO_UNITARIO, PRECIO_TOTAL_UNITARIO) 
VALUES ('3', '3', '1', '3', 30, 8.00, 240.00);
COMMIT;


--------------------------------------------[TRIGGERS]--------------------------------------------

-------------------------------AUMENTAR ID CLIENTES------------------------------------------------ 
CREATE SEQUENCE ID_CLIENTES_SEQ
START WITH 4
INCREMENT BY 1;

SELECT ID_CLIENTES_SEQ.NEXTVAL AS SECUENCIA FROM DUAL;


CREATE OR REPLACE TRIGGER FIDE_FIDE_CLIENTES_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
:NEW.FIDE_CLIENTES_TB_ID_CLIENTE_PK := ID_CLIENTES_SEQ.NEXTVAL;
END;

-------------------------------AUMENTAR ID INVENTARIO------------------------------------------------ 
CREATE SEQUENCE ID_INVENTARIO_SEQ
START WITH 4
INCREMENT BY 1;

SELECT ID_INVENTARIO_SEQ.NEXTVAL AS SECUENCIA FROM DUAL;


CREATE OR REPLACE TRIGGER FIDE_FIDE_INVENTARIO_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
:NEW.FIDE_INVENTARIO_TB_ID_INVENTARIO_PK := ID_INVENTARIO_SEQ.NEXTVAL;
END;
-------------------------------AUMENTAR ID decuentos------------------------------------------------ 
CREATE SEQUENCE FIDE_DESCUENTO_SEQ
START WITH 4
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER FIDE_DESCUENTO_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
    :NEW.FIDE_DESCUENTO_TB_ID_DESCUENTO_PK := FIDE_DESCUENTO_SEQ.NEXTVAL;
END;

-------------------------------AUMENTAR ID PROVEEDORES------------------------------------------------ 
CREATE SEQUENCE ID_PROVEEDORES_SEQ
START WITH 4
INCREMENT BY 1;

SELECT ID_PROVEEDORES_SEQ.NEXTVAL AS SECUENCIA FROM DUAL;

CREATE OR REPLACE TRIGGER FIDE_PROVEEDORES_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
    :NEW.FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK := ID_PROVEEDORES_SEQ.NEXTVAL;
END;



-------------------------------AUMENTAR ID Promociones------------------------------------------------ 
CREATE SEQUENCE FIDE_PROMOCIONES_SEQ
START WITH 4
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER FIDE_PROMOCIONES_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_PROMOCIONES_TB
FOR EACH ROW
BEGIN
    :NEW.FIDE_PROMOCIONES_TB_ID_PROMOCION_PK := FIDE_PROMOCIONES_SEQ.NEXTVAL;
END;

-------------------------------AUMENTAR ID pallets------------------------------------------------ 

CREATE SEQUENCE FIDE_PALLETS_SEQ
START WITH 4
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER FIDE_PALLETS_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_PALLETS_TB
FOR EACH ROW
BEGIN
    :NEW.FIDE_PALLETS_TB_ID_PALLET_PK := FIDE_PALLETS_SEQ.NEXTVAL;
END;


-------------------------------AUMENTAR ID Facturas------------------------------------------------ 
CREATE SEQUENCE FIDE_FACTURAS_SEQ
START WITH 4
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER FIDE_FACTURAS_TB_SEQ_ID_TRG
BEFORE INSERT ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
    :NEW.FIDE_FACTURAS_TB_ID_FACTURAS_PK := FIDE_FACTURAS_SEQ.NEXTVAL;
END;

--------------------------------FECHA DE CREACION Y FECHA DE MODIFICACION PARA TODAS LAS TABLAS--------------------------------
---------TRIGGER PARA LA TABLA ESTADOS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_ESTADOS_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA PAIS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PAIS_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PAIS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA PROVINCIA---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVINCIA_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA CANTON---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CANTON_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA DISTRITO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DISTRITO_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA PROVEEDORES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVEEDORES_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA CLIENTES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CLIENTES_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA INVENTARIO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_INVENTARIO_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA PALLETS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PALLETS_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PALLETS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DESCUENTO_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA TIPO_DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_TIPO_DESCUENTO_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_DESCUENTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA PROMOCIONES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROMOCIONES_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROMOCIONES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_FACTURAS_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;


---------TRIGGER PARA LA TABLA DETALLES_FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DETALLES_FACTURAS_TB_SEQ_CREACION_FECHA_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLES_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.FECHA_CREACION := SYSTIMESTAMP;
  ELSE
    :NEW.FECHA_MODIFICACION := SYSTIMESTAMP;
  END IF;
END;



--------------------------------CREADO POR Y MODIFICADO POR PARA TODAS LAS TABLAS--------------------------------
---------TRIGGER PARA LA TABLA PROVINCIA---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVINCIA_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA CANTON---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CANTON_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA DISTRITO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DISTRITO_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA PROVEEDORES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVEEDORES_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA CLIENTES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CLIENTES_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;

---------TRIGGER PARA LA TABLA INVENTARIO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_INVENTARIO_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA PALLETS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PALLETS_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PALLETS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DESCUENTO_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA TIPO_DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_TIPO_DESCUENTO_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_DESCUENTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;

---------TRIGGER PARA LA TABLA PROMOCIONES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROMOCIONES_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROMOCIONES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_FACTURAS_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA DETALLES_FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DETALLES_FACTURAS_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLES_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;

---------TRIGGER PARA LA TABLA ESTADOS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_ESTADOS_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;


---------TRIGGER PARA LA TABLA PAIS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PAIS_TB_SEQ_CREACION_MODIFICACION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PAIS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREADO_POR := USER;
  ELSE
    :NEW.MODIFICADO_POR := USER;
  END IF;
END;



--------------------------------INSERT Y UPDATE PARA TODAS LAS TABLAS--------------------------------
---------TRIGGER PARA LA TABLA ESTADOS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_ESTADOS_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_ESTADOS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA PAIS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PAIS_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PAIS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA PROVINCIA---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVINCIA_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA CANTON---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CANTON_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA DISTRITO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DISTRITO_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA PROVEEDORES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVEEDORES_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA INVENTARIO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_INVENTARIO_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA PALLETS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PALLETS_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PALLETS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DESCUENTO_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA TIPO_DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_TIPO_DESCUENTO_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_TIPO_DESCUENTO_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA PROMOCIONES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROMOCIONES_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_PROMOCIONES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA DETALLES_FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DETALLES_FACTURAS_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_DETALLES_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_FACTURAS_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;


---------TRIGGER PARA LA TABLA CLIENTES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CLIENTES_TB_SEQ_CREACION_ACCION_TRG
BEFORE INSERT OR UPDATE ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.ACCION := 'INSERT';
  ELSE
    :NEW.ACCION := 'UPDATE';
  END IF;
END;



--------------------------------INSERT Y UPDATE PARA TODAS LAS TABLAS--------------------------------
---------TRIGGER PARA LA TABLA FIDE_ESTADOS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_ESTADOS_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_ESTADOS_TB
FOR EACH ROW
BEGIN
:NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA PAIS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PAIS_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_PAIS_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA PROVINCIA---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVINCIA_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_PROVINCIA_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA CANTON---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CANTON_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_CANTON_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA DISTRITO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DISTRITO_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_DISTRITO_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA PROVEEDORES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROVEEDORES_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA INVENTARIO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_INVENTARIO_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA PALLETS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PALLETS_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_PALLETS_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DESCUENTO_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_DESCUENTO_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA TIPO_DESCUENTO---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_TIPO_DESCUENTO_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_TIPO_DESCUENTO_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA PROMOCIONES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_PROMOCIONES_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_PROMOCIONES_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA DETALLES_FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_DETALLES_FACTURAS_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_DETALLES_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA FACTURAS---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_FACTURAS_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_FACTURAS_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


---------TRIGGER PARA LA TABLA CLIENTES---------
CREATE OR REPLACE TRIGGER FIDE_FIDE_CLIENTES_TB_SEQ_ESTADO_TRG
BEFORE INSERT ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  :NEW.ESTADO := 'A';
END;


--------------------------------------------[VISTAS]--------------------------------------------

---------Muestra las facturas generadas en el último mes---------
CREATE VIEW FIDE_FACTURAS_RECENTES_V AS
SELECT 
    FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA,
    ID_CLIENTE,
    FECHA_VENTA,
    SUBTOTAL,
    TOTAL_VENTA
FROM 
    FIDE_FACTURAS_TB
WHERE 
    FECHA_VENTA >= ADD_MONTHS(SYSDATE, -1);
SELECT * FROM FIDE_FACTURAS_RECENTES_V;

---------Muestra las facturas asociadas a un cliente---------
CREATE VIEW FIDE_FACTURAS_CLIENTES_V AS
SELECT 
    FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA,
    ID_CLIENTE,
    FECHA_VENTA,
    TOTAL_VENTA
FROM 
    FIDE_FACTURAS_TB
WHERE 
    ID_CLIENTE IS NOT NULL;
SELECT * FROM FIDE_FACTURAS_CLIENTES_V;

---------Muestra los proveedores con su nombre, correo y teléfono de contacto---------
CREATE VIEW FIDE_PROVEEDORES_CONTACTOS_V AS
SELECT 
    FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK AS ID_PROVEEDOR,
    NOMBRE_PROVEEDOR,
    CORREO,
    TELEFONO
FROM 
    FIDE_PROVEEDORES_TB
WHERE 
    TELEFONO IS NOT NULL;
SELECT * FROM FIDE_PROVEEDORES_CONTACTOS_V;

---------Muestra los productos cuyo inventario está por debajo de la cantidad mínima---------
CREATE VIEW FIDE_INVENTARIO_CANTIDAD_MINIMA_V AS
SELECT 
    FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_INVENTARIO,
    NOMBRE,
    CANTIDAD,
    PRECIO
FROM 
    FIDE_INVENTARIO_TB
WHERE 
    CANTIDAD <= 10;
SELECT * FROM FIDE_INVENTARIO_CANTIDAD_MINIMA_V;

---------Muestra los productos del inventario con su ID, nombre, precio y cantidad---------
CREATE VIEW FIDE_INVENTARIO_PRECIO_V AS
SELECT 
    FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_INVENTARIO,
    NOMBRE,
    PRECIO,
    CANTIDAD
FROM 
    FIDE_INVENTARIO_TB
ORDER BY 
    PRECIO DESC;
SELECT * FROM FIDE_INVENTARIO_PRECIO_V;

---------Muestra informacion principal de los clientes---------
CREATE VIEW FIDE_CLIENTES_V AS
SELECT 
    C.FIDE_CLIENTES_TB_ID_CLIENTE_PK AS ID_CLIENTE,
    C.NOMBRE,
    C.TELEFONO,
    C.CORREO
FROM 
    FIDE_CLIENTES_TB C
ORDER BY 
    C.NOMBRE;

SELECT * FROM FIDE_CLIENTES_V;

---------Muestra los productos asociados a cada pallet---------
CREATE VIEW FIDE_INVENTARIO_POR_PALLET_V AS
SELECT 
    I.ID_PALLET AS PALLET_ID,
    I.NOMBRE AS PRODUCTO_NOMBRE,
    I.CANTIDAD,
    I.PRECIO AS PRECIO_UNITARIO,
    (I.CANTIDAD * I.PRECIO) AS TOTAL_PALLET
FROM 
    FIDE_INVENTARIO_TB I
JOIN 
    FIDE_PALLETS_TB PLT ON I.ID_PALLET = PLT.FIDE_PALLETS_TB_ID_PALLET_PK;

SELECT * FROM FIDE_INVENTARIO_POR_PALLET_V;

---------Muestra la ganancia total de cada pallet---------
CREATE VIEW FIDE_GANANCIAS_POR_PALLET_V AS
SELECT 
    I.ID_PALLET AS PALLET_ID,
    SUM(I.CANTIDAD * I.PRECIO) AS GANANCIA_PALLET
FROM 
    FIDE_INVENTARIO_TB I
WHERE 
    I.CANTIDAD > 0
GROUP BY 
    I.ID_PALLET;
   
SELECT * FROM FIDE_GANANCIAS_POR_PALLET_V;

---------Muestra los proveedores Activos---------
CREATE VIEW FIDE_PROVEEDORES_ACTIVOS_V AS
SELECT 
    P.FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK AS ID_PROVEEDOR,
    P.NOMBRE_PROVEEDOR AS NOMBRE_PROVEEDOR,
    P.TELEFONO,
    P.CORREO
FROM 
    FIDE_PROVEEDORES_TB P
WHERE 
    P.ESTADO = 'ACTIVO'
ORDER BY 
    P.NOMBRE_PROVEEDOR;

SELECT * FROM FIDE_PROVEEDORES_ACTIVOS_V;

---------Muestra los empleados Activos---------
CREATE VIEW FIDE_CLIENTES_POR_ESTADO_V AS
SELECT 
    C.FIDE_CLIENTES_TB_ID_CLIENTE_PK AS ID_CLIENTE,
    C.NOMBRE AS NOMBRE_CLIENTE,
    C.TELEFONO,
    C.ESTADO
FROM 
    FIDE_CLIENTES_TB C
ORDER BY 
    C.ESTADO, C.NOMBRE;

SELECT * FROM FIDE_CLIENTES_POR_ESTADO_V;

---------Muestra el detalle de la factura---------
CREATE VIEW FIDE_DETALLES_FACTURAS_V AS
SELECT 
    DF.FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK AS ID_DETALLE,
    F.FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA,
    I.NOMBRE AS PRODUCTO,
    DF.CANTIDAD_VENDIDA,
    DF.PRECIO_UNITARIO,
    DF.PRECIO_TOTAL_UNITARIO
FROM 
    FIDE_DETALLES_FACTURAS_TB DF
JOIN 
    FIDE_FACTURAS_TB F ON DF.ID_FACTURAS = F.FIDE_FACTURAS_TB_ID_FACTURAS_PK
JOIN 
    FIDE_INVENTARIO_TB I ON DF.ID_INVENTARIO = I.FIDE_INVENTARIO_TB_ID_INVENTARIO_PK;

SELECT * FROM FIDE_DETALLES_FACTURAS_V;
--------------------------------------------[PROCEDIMIENTOS ALMACENADOS]--------------------------------------------

-------------------------------Agregar Clientes------------------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_CLIENTES_TB_INSERTAR_CLIENTE_SP (
    P_NOMBRE IN VARCHAR2,
    P_CORREO IN VARCHAR2,
    P_CONTRASENA IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_DIRECCION IN VARCHAR2,
    P_ID_PAIS IN VARCHAR2,
    P_ID_PROVINCIA IN VARCHAR2,
    P_ID_CANTON IN VARCHAR2,
    P_ID_DISTRITO IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CLIENTES_TB (
        NOMBRE, CORREO, CONTRASENA, TELEFONO, DIRECCION, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO
    ) 
    VALUES (
        P_NOMBRE, P_CORREO, P_CONTRASENA, P_TELEFONO, P_DIRECCION, P_ID_PAIS, P_ID_PROVINCIA, P_ID_CANTON, P_ID_DISTRITO
    );

    COMMIT;
END;


-------------------------------Actualizar Clientes------------------------------------------------  
CREATE OR REPLACE PROCEDURE FIDE_CLIENTES_TB_ACTUALIZAR_SP (
    P_ID_CLIENTE FIDE_CLIENTES_TB.FIDE_CLIENTES_TB_ID_CLIENTE_PK%TYPE,
    P_NOMBRE FIDE_CLIENTES_TB.NOMBRE%TYPE,
    P_CORREO FIDE_CLIENTES_TB.CORREO%TYPE,
    P_TELEFONO FIDE_CLIENTES_TB.TELEFONO%TYPE,
    P_DIRECCION FIDE_CLIENTES_TB.DIRECCION%TYPE,
    P_ID_PAIS FIDE_CLIENTES_TB.ID_PAIS%TYPE,
    P_ID_PROVINCIA FIDE_CLIENTES_TB.ID_PROVINCIA%TYPE,
    P_ID_CANTON FIDE_CLIENTES_TB.ID_CANTON%TYPE,
    P_ID_DISTRITO FIDE_CLIENTES_TB.ID_DISTRITO%TYPE
)
AS
BEGIN
    UPDATE FIDE_CLIENTES_TB
    SET
        NOMBRE = P_NOMBRE,
        CORREO = P_CORREO,
        TELEFONO = P_TELEFONO,
        DIRECCION = P_DIRECCION,
        ID_PAIS = P_ID_PAIS,
        ID_PROVINCIA = P_ID_PROVINCIA,
        ID_CANTON = P_ID_CANTON,
        ID_DISTRITO = P_ID_DISTRITO
    WHERE FIDE_CLIENTES_TB_ID_CLIENTE_PK = P_ID_CLIENTE;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Se modificaron los datos');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se cancelo la modificacion');
END FIDE_CLIENTES_TB_ACTUALIZAR_SP;

----------------------- Eliminar Cliente------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_CLIENTES_TB_ELIMINAR_SP (
    P_ID_CLIENTE FIDE_CLIENTES_TB.FIDE_CLIENTES_TB_ID_CLIENTE_PK%TYPE
)
AS
BEGIN
    DELETE FROM FIDE_CLIENTES_TB
    WHERE FIDE_CLIENTES_TB_ID_CLIENTE_PK = P_ID_CLIENTE;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El cliente con el ID ' || P_ID_CLIENTE || ' se eliminó');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar el cliente');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló el procedimiento');
END FIDE_CLIENTES_TB_ELIMINAR_SP;
-------------------------------Agregar Proveedor------------------------------------------------ 

CREATE OR REPLACE PROCEDURE FIDE_PROVEEDORES_TB_INSERTAR_PROVEEDOR_SP (
    P_ID_ESTADOS IN VARCHAR2,
    P_ID_PAIS IN VARCHAR2,
    P_ID_PROVINCIA IN VARCHAR2,
    P_ID_CANTON IN VARCHAR2,
    P_ID_DISTRITO IN VARCHAR2,
    P_DIRECCION IN VARCHAR2,
    P_NOMBRE_PROVEEDOR IN VARCHAR2,
    P_TELEFONO IN VARCHAR2,
    P_CORREO IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_PROVEEDORES_TB (
        ID_ESTADOS,ID_PAIS,ID_PROVINCIA,ID_CANTON,ID_DISTRITO,DIRECCION,NOMBRE_PROVEEDOR,TELEFONO,CORREO
    ) 
    VALUES (
        P_ID_ESTADOS,P_ID_PAIS,P_ID_PROVINCIA,P_ID_CANTON,P_ID_DISTRITO,P_DIRECCION,P_NOMBRE_PROVEEDOR,P_TELEFONO,P_CORREO
    );

    COMMIT;
END;
----------------------- Actualizar proveedor------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PROVEEDORES_TB_ACTUALIZAR_SP (
    P_ID_PROVEEDOR FIDE_PROVEEDORES_TB.FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK%TYPE,
    P_DIRECCION FIDE_PROVEEDORES_TB.DIRECCION%TYPE,
    P_NOMBRE_PROVEEDOR FIDE_PROVEEDORES_TB.NOMBRE_PROVEEDOR%TYPE,
    P_TELEFONO FIDE_PROVEEDORES_TB.TELEFONO%TYPE,
    P_CORREO FIDE_PROVEEDORES_TB.CORREO%TYPE
)
AS
BEGIN
    UPDATE FIDE_PROVEEDORES_TB
    SET
        DIRECCION = P_DIRECCION,
        NOMBRE_PROVEEDOR = P_NOMBRE_PROVEEDOR,
        TELEFONO = P_TELEFONO,
        CORREO = P_CORREO
    WHERE FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK = P_ID_PROVEEDOR;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Se modificaron los datos');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al modificar');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la modificación');
END FIDE_PROVEEDORES_TB_ACTUALIZAR_SP;

----------------------- Eliminar Proveedor------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PROVEEDORES_TB_ELIMINAR_SP (
    P_ID_PROVEEDOR FIDE_PROVEEDORES_TB.FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK%TYPE)
AS
BEGIN
    DELETE FROM FIDE_PROVEEDORES_TB
    WHERE FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK = P_ID_PROVEEDOR;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El proveedor con el id ' || P_ID_PROVEEDOR || ' Se eliminó');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la eliminación');
END FIDE_PROVEEDORES_TB_ELIMINAR_SP;


----------------------- Agregar Producto------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_INVENTARIO_TB_REGISTRAR_SP (
    P_ID_INVENTARIO IN VARCHAR2,
    P_ID_PALLET IN VARCHAR2,
    P_NOMBRE IN VARCHAR2,
    P_CANTIDAD IN NUMBER,
    P_PRECIO IN NUMBER
) AS
BEGIN
    INSERT INTO FIDE_INVENTARIO_TB (
        FIDE_INVENTARIO_TB_ID_INVENTARIO_PK,
        ID_PALLET,
        NOMBRE,
        CANTIDAD,
        PRECIO
    )
    VALUES (
        P_ID_INVENTARIO,
        P_ID_PALLET,
        P_NOMBRE,
        P_CANTIDAD,
        P_PRECIO
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Se agrego el producto con el id: ' || P_ID_INVENTARIO);
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        ROLLBACK;
END FIDE_INVENTARIO_TB_REGISTRAR_SP;
    
-----------------------Actualizar Producto------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_INVENTARIO_TB_ACTUALIZAR_SP (
    P_ID_INVENTARIO FIDE_INVENTARIO_TB.FIDE_INVENTARIO_TB_ID_INVENTARIO_PK%TYPE,
    P_ID_PALLET FIDE_INVENTARIO_TB.ID_PALLET%TYPE,
    P_NOMBRE FIDE_INVENTARIO_TB.NOMBRE%TYPE,
    P_CANTIDAD FIDE_INVENTARIO_TB.CANTIDAD%TYPE,
    P_PRECIO FIDE_INVENTARIO_TB.PRECIO%TYPE,
    P_ID_ESTADOS FIDE_INVENTARIO_TB.ID_ESTADOS%TYPE
)
AS
BEGIN
    UPDATE FIDE_INVENTARIO_TB
    SET
        ID_PALLET = P_ID_PALLET,
        NOMBRE = P_NOMBRE,
        CANTIDAD = P_CANTIDAD,
        PRECIO = P_PRECIO,
        ID_ESTADOS = P_ID_ESTADOS
    WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = P_ID_INVENTARIO;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Se modificó el producto con el nuevo estado.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error.');
        ROLLBACK;
END FIDE_INVENTARIO_TB_ACTUALIZAR_SP;


-----------------------Eliminar Producto------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_INVENTARIO_TB_ELIMINAR_SP (
    P_ID_INVENTARIO FIDE_INVENTARIO_TB.FIDE_INVENTARIO_TB_ID_INVENTARIO_PK%TYPE
)
AS
BEGIN
    DELETE FROM FIDE_INVENTARIO_TB
    WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = P_ID_INVENTARIO;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El producto se eliminó.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('No se pudo eliminar el artículo.');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la eliminación.');
END FIDE_INVENTARIO_TB_ELIMINAR_SP;


-----------------------Agregar Factura------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_FACTURAS_TB_REGISTRAR_SP (
    P_ID_FACTURA FIDE_FACTURAS_TB.FIDE_FACTURAS_TB_ID_FACTURAS_PK%TYPE,
    P_ID_CLIENTE FIDE_FACTURAS_TB.ID_CLIENTE%TYPE,
    P_ID_PROMOCION FIDE_FACTURAS_TB.ID_PROMOCION%TYPE,
    P_FECHA_VENTA FIDE_FACTURAS_TB.FECHA_VENTA%TYPE,
    P_IMPUESTOS FIDE_FACTURAS_TB.IMPUESTOS%TYPE,
    P_IDS_INVENTARIO VARCHAR2, 
    P_CANTIDADES VARCHAR2,  
    P_TOTAL_VENTA OUT FIDE_FACTURAS_TB.TOTAL_VENTA%TYPE
)
AS
    V_SUBTOTAL FIDE_FACTURAS_TB.SUBTOTAL%TYPE := 0;
    V_IDS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
    V_QTY SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST();
    V_INDEX PLS_INTEGER;
BEGIN
    V_IDS := SYS.ODCIVARCHAR2LIST(P_IDS_INVENTARIO);
    V_QTY := SYS.ODCINUMBERLIST(P_CANTIDADES);
    FOR V_INDEX IN 1..V_IDS.COUNT LOOP
        DECLARE
            V_PRECIO_UNITARIO FIDE_INVENTARIO_TB.PRECIO%TYPE := 0;
        BEGIN
            SELECT PRECIO INTO V_PRECIO_UNITARIO 
            FROM FIDE_INVENTARIO_TB
            WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = V_IDS(V_INDEX);
            V_SUBTOTAL := V_SUBTOTAL + (V_PRECIO_UNITARIO * V_QTY(V_INDEX));
            UPDATE FIDE_INVENTARIO_TB
            SET CANTIDAD = CANTIDAD - V_QTY(V_INDEX)
            WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = V_IDS(V_INDEX);
            IF SQL%ROWCOUNT = 0 THEN
                RAISE_APPLICATION_ERROR(-20001, 'Error con el ID ' || V_IDS(V_INDEX) || 'No se encontro el producto o no hay la cantidad suficiente.');
            END IF;
        END;
    END LOOP;
    P_TOTAL_VENTA := V_SUBTOTAL + P_IMPUESTOS;
    INSERT INTO FIDE_FACTURAS_TB (
        FIDE_FACTURAS_TB_ID_FACTURAS_PK,
        ID_CLIENTE,
        ID_PROMOCION,
        FECHA_VENTA,
        SUBTOTAL,
        IMPUESTOS,
        TOTAL_VENTA
    ) VALUES (
        P_ID_FACTURA,
        P_ID_CLIENTE,
        P_ID_PROMOCION,
        P_FECHA_VENTA,
        V_SUBTOTAL,
        P_IMPUESTOS,
        P_TOTAL_VENTA
    );
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La Factura con el ID ' || P_ID_FACTURA || ' Se ha registrado el Total es de:' || P_TOTAL_VENTA);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        ROLLBACK;
END FIDE_FACTURAS_TB_REGISTRAR_SP;

-----------------------Modificar Factura------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_FACTURAS_TB_MODIFICAR_SP (
    P_ID_FACTURA FIDE_FACTURAS_TB.FIDE_FACTURAS_TB_ID_FACTURAS_PK%TYPE,
    P_ID_CLIENTE FIDE_FACTURAS_TB.ID_CLIENTE%TYPE,
    P_ID_PROMOCION FIDE_FACTURAS_TB.ID_PROMOCION%TYPE,
    P_FECHA_VENTA FIDE_FACTURAS_TB.FECHA_VENTA%TYPE,
    P_IMPUESTOS FIDE_FACTURAS_TB.IMPUESTOS%TYPE,
    P_IDS_INVENTARIO VARCHAR2, 
    P_CANTIDADES VARCHAR2, 
    P_TOTAL_VENTA OUT FIDE_FACTURAS_TB.TOTAL_VENTA%TYPE
)
AS
    V_SUBTOTAL FIDE_FACTURAS_TB.SUBTOTAL%TYPE := 0;
    V_IDS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
    V_QTY SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST();
    V_INDEX PLS_INTEGER;
BEGIN
    V_IDS := SYS.ODCIVARCHAR2LIST(P_IDS_INVENTARIO);
    V_QTY := SYS.ODCINUMBERLIST(P_CANTIDADES);
    FOR V_INDEX IN 1..V_IDS.COUNT LOOP
        UPDATE FIDE_INVENTARIO_TB
        SET CANTIDAD = CANTIDAD + V_QTY(V_INDEX)
        WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = V_IDS(V_INDEX);
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error al modificar el inventario para el producto: ' || V_IDS(V_INDEX));
        END IF;
    END LOOP;
    V_SUBTOTAL := 0; 
    FOR V_INDEX IN 1..V_IDS.COUNT LOOP
        DECLARE
            V_PRECIO_UNITARIO FIDE_INVENTARIO_TB.PRECIO%TYPE := 0;
        BEGIN
            SELECT PRECIO INTO V_PRECIO_UNITARIO
            FROM FIDE_INVENTARIO_TB
            WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = V_IDS(V_INDEX);
            V_SUBTOTAL := V_SUBTOTAL + (V_PRECIO_UNITARIO * V_QTY(V_INDEX));
            UPDATE FIDE_INVENTARIO_TB
            SET CANTIDAD = CANTIDAD - V_QTY(V_INDEX)
            WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = V_IDS(V_INDEX);
            IF SQL%ROWCOUNT = 0 THEN
                RAISE_APPLICATION_ERROR(-20001, 'Error con el ID ' || V_IDS(V_INDEX) || 'No se encontro el producto o no hay la cantidad suficiente.');
            END IF;
        END;
    END LOOP;
    P_TOTAL_VENTA := V_SUBTOTAL + P_IMPUESTOS;
    UPDATE FIDE_FACTURAS_TB
    SET 
        ID_CLIENTE = P_ID_CLIENTE,
        ID_PROMOCION = P_ID_PROMOCION,
        FECHA_VENTA = P_FECHA_VENTA,
        SUBTOTAL = V_SUBTOTAL,
        IMPUESTOS = P_IMPUESTOS,
        TOTAL_VENTA = P_TOTAL_VENTA
    WHERE FIDE_FACTURAS_TB_ID_FACTURAS_PK = P_ID_FACTURA;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La Factura con el ID ' || P_ID_FACTURA || ' Se ha modificado el Total es de:' || P_TOTAL_VENTA);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        ROLLBACK;
END FIDE_FACTURAS_TB_MODIFICAR_SP;

-----------------------Eliminar Factura------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_FACTURAS_TB_ELIMINAR_SP (
    P_ID_FACTURA FIDE_FACTURAS_TB.FIDE_FACTURAS_TB_ID_FACTURAS_PK%TYPE,
    P_IDS_INVENTARIO VARCHAR2,
    P_CANTIDADES VARCHAR2  
)
AS
    V_IDS SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST();
    V_QTY SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST();
    V_INDEX PLS_INTEGER;
BEGIN
    IF P_IDS_INVENTARIO IS NOT NULL AND P_CANTIDADES IS NOT NULL THEN
        V_IDS := SYS.ODCIVARCHAR2LIST(P_IDS_INVENTARIO);
        V_QTY := SYS.ODCINUMBERLIST(P_CANTIDADES);
        FOR V_INDEX IN 1..V_IDS.COUNT LOOP
            UPDATE FIDE_INVENTARIO_TB
            SET CANTIDAD = CANTIDAD + V_QTY(V_INDEX)
            WHERE FIDE_INVENTARIO_TB_ID_INVENTARIO_PK = V_IDS(V_INDEX);
            IF SQL%ROWCOUNT = 0 THEN
                RAISE_APPLICATION_ERROR(-20001, 'Error al modificar el inventario para el producto: ' || V_IDS(V_INDEX));
            END IF;
        END LOOP;
    END IF;

    DELETE FROM FIDE_FACTURAS_TB
    WHERE FIDE_FACTURAS_TB_ID_FACTURAS_PK = P_ID_FACTURA;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La Factura con el ID ' || P_ID_FACTURA || ' se ha eliminado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar factura.');
        ROLLBACK;
END FIDE_FACTURAS_TB_ELIMINAR_SP;

-----------------------Registrar promocion------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PROMOCIONES_TB_REGISTRAR_SP (
    P_ID_PROMOCION FIDE_PROMOCIONES_TB.FIDE_PROMOCIONES_TB_ID_PROMOCION_PK%TYPE,
    P_ID_FACTURA FIDE_PROMOCIONES_TB.ID_FACTURAS%TYPE,
    P_NOMBRE_PROMOCION FIDE_PROMOCIONES_TB.NOMBRE_PROMOCION%TYPE,
    P_FECHA_INICIO FIDE_PROMOCIONES_TB.FECHA_INICIO%TYPE,
    P_FECHA_FIN FIDE_PROMOCIONES_TB.FECHA_FIN%TYPE,
    P_DESCRIPCION FIDE_PROMOCIONES_TB.DESCRIPCION%TYPE
)
AS
BEGIN
    INSERT INTO FIDE_PROMOCIONES_TB (
        FIDE_PROMOCIONES_TB_ID_PROMOCION_PK,
        ID_FACTURAS,
        NOMBRE_PROMOCION,
        FECHA_INICIO,
        FECHA_FIN,
        DESCRIPCION
    ) VALUES (
        P_ID_PROMOCION,
        P_ID_FACTURA,
        P_NOMBRE_PROMOCION,
        P_FECHA_INICIO,
        P_FECHA_FIN,
        P_DESCRIPCION
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La promoción se registró');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('No se pudo registrar la promoción');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló el registro');
END FIDE_PROMOCIONES_TB_REGISTRAR_SP;

-----------------------modificar promocion------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PROMOCIONES_TB_MODIFICAR_SP (
    P_ID_PROMOCION FIDE_PROMOCIONES_TB.FIDE_PROMOCIONES_TB_ID_PROMOCION_PK%TYPE,
    P_NOMBRE_PROMOCION FIDE_PROMOCIONES_TB.NOMBRE_PROMOCION%TYPE,
    P_FECHA_INICIO FIDE_PROMOCIONES_TB.FECHA_INICIO%TYPE,
    P_FECHA_FIN FIDE_PROMOCIONES_TB.FECHA_FIN%TYPE,
    P_DESCRIPCION FIDE_PROMOCIONES_TB.DESCRIPCION%TYPE
)
AS
BEGIN
    UPDATE FIDE_PROMOCIONES_TB
    SET
        NOMBRE_PROMOCION = P_NOMBRE_PROMOCION,
        FECHA_INICIO = P_FECHA_INICIO,
        FECHA_FIN = P_FECHA_FIN,
        DESCRIPCION = P_DESCRIPCION
    WHERE FIDE_PROMOCIONES_TB_ID_PROMOCION_PK = P_ID_PROMOCION;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La promoción se modificó');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al modificar la promoción');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la modificación');
END FIDE_PROMOCIONES_TB_MODIFICAR_SP;

-----------------------Eliminar Promocion------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PROMOCIONES_TB_ELIMINAR_SP (
    P_ID_PROMOCION FIDE_PROMOCIONES_TB.FIDE_PROMOCIONES_TB_ID_PROMOCION_PK%TYPE
)
AS
BEGIN
    DELETE FROM FIDE_PROMOCIONES_TB
    WHERE FIDE_PROMOCIONES_TB_ID_PROMOCION_PK = P_ID_PROMOCION;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La promoción con el ID ' || P_ID_PROMOCION || ' se ha eliminado');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar la promoción');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la eliminación');
END FIDE_PROMOCIONES_TB_ELIMINAR_SP;

-----------------------Registrar Descuento------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_DESCUENTO_TB_REGISTRAR_SP (
    P_ID_DESCUENTO FIDE_DESCUENTO_TB.FIDE_DESCUENTO_TB_ID_DESCUENTO_PK%TYPE,
    P_ID_TIPO_DESCUENTO FIDE_DESCUENTO_TB.ID_TIPO_DESCUENTO%TYPE,
    P_VALOR FIDE_DESCUENTO_TB.VALOR%TYPE
)
AS
BEGIN
    INSERT INTO FIDE_DESCUENTO_TB (
        FIDE_DESCUENTO_TB_ID_DESCUENTO_PK,
        ID_TIPO_DESCUENTO,
        VALOR
    ) VALUES (
        P_ID_DESCUENTO,
        P_ID_TIPO_DESCUENTO,
        P_VALOR
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El descuento se registró');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar el descuento');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló el registro');
END FIDE_DESCUENTO_TB_REGISTRAR_SP;


-----------------------Editar Descuento------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_DESCUENTO_TB_MODIFICAR_SP (
    P_ID_DESCUENTO FIDE_DESCUENTO_TB.FIDE_DESCUENTO_TB_ID_DESCUENTO_PK%TYPE,
    P_ID_TIPO_DESCUENTO FIDE_DESCUENTO_TB.ID_TIPO_DESCUENTO%TYPE,
    P_VALOR FIDE_DESCUENTO_TB.VALOR%TYPE
)
AS
BEGIN
    UPDATE FIDE_DESCUENTO_TB
    SET
        ID_TIPO_DESCUENTO = P_ID_TIPO_DESCUENTO,
        VALOR = P_VALOR
    WHERE FIDE_DESCUENTO_TB_ID_DESCUENTO_PK = P_ID_DESCUENTO;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El descuento se ha modificado');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al modificar el descuento');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la modificación');
END FIDE_DESCUENTO_TB_MODIFICAR_SP;

-----------------------Eliminar Descuento------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_DESCUENTO_TB_ELIMINAR_SP (
    P_ID_DESCUENTO FIDE_DESCUENTO_TB.FIDE_DESCUENTO_TB_ID_DESCUENTO_PK%TYPE
)
AS
BEGIN
    DELETE FROM FIDE_DESCUENTO_TB
    WHERE FIDE_DESCUENTO_TB_ID_DESCUENTO_PK = P_ID_DESCUENTO;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El descuento se eliminó');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar el descuento');
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Se canceló la eliminación');
END FIDE_DESCUENTO_TB_ELIMINAR_SP;

-----------------------Registrar pallet------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_PALLETS_TB_INSERTAR_SP (
    P_ID_PROVEEDORES IN VARCHAR2,
    P_ID_ESTADOS IN VARCHAR2,
    P_DESCRIPCION IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_PALLETS_TB (
        FIDE_PALLETS_TB_ID_PALLET_PK,
        ID_PROVEEDORES,
        ID_ESTADOS,
        DESCRIPCION,
        ESTADO
    )
    VALUES (
        NULL, 
        P_ID_PROVEEDORES,
        P_ID_ESTADOS,
        P_DESCRIPCION,
        'ACTIVO'
    );

    COMMIT;
END;
-----------------------Editar pallet------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PALLETS_TB_ACTUALIZAR_SP (
    P_ID_PALLET IN FIDE_PALLETS_TB.FIDE_PALLETS_TB_ID_PALLET_PK%TYPE,
    P_ID_PROVEEDORES IN FIDE_PALLETS_TB.ID_PROVEEDORES%TYPE,
    P_ID_ESTADOS IN FIDE_PALLETS_TB.ID_ESTADOS%TYPE,
    P_DESCRIPCION IN FIDE_PALLETS_TB.DESCRIPCION%TYPE
) AS
BEGIN
    UPDATE FIDE_PALLETS_TB
    SET
        ID_PROVEEDORES = P_ID_PROVEEDORES,
        ID_ESTADOS = P_ID_ESTADOS,
        DESCRIPCION = P_DESCRIPCION,
        FECHA_MODIFICACION = SYSDATE
    WHERE FIDE_PALLETS_TB_ID_PALLET_PK = P_ID_PALLET;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END;
-----------------------eliminar pallet------------------------------------

CREATE OR REPLACE PROCEDURE FIDE_PALLETS_TB_ELIMINAR_SP (
    P_ID_PALLET IN FIDE_PALLETS_TB.FIDE_PALLETS_TB_ID_PALLET_PK%TYPE
) AS
BEGIN
    DELETE FROM FIDE_PALLETS_TB
    WHERE FIDE_PALLETS_TB_ID_PALLET_PK = P_ID_PALLET;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END;

-----------------------agregar detalle factura------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_DETALLES_FACTURAS_AGREGAR_SP (
    P_ID_DETALLE IN VARCHAR2,
    P_ID_FACTURAS IN VARCHAR2,
    P_ID_ESTADOS IN VARCHAR2,
    P_ID_INVENTARIO IN VARCHAR2,
    P_CANTIDAD_VENDIDA IN INT,
    P_PRECIO_UNITARIO IN DECIMAL,
    P_PRECIO_TOTAL_UNITARIO IN DECIMAL
)
AS
BEGIN
    INSERT INTO FIDE_DETALLES_FACTURAS_TB (
        FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK,
        ID_FACTURAS,
        ID_ESTADOS,
        ID_INVENTARIO,
        CANTIDAD_VENDIDA,
        PRECIO_UNITARIO,
        PRECIO_TOTAL_UNITARIO
    ) VALUES (
        P_ID_DETALLE,
        P_ID_FACTURAS,
        P_ID_ESTADOS,
        P_ID_INVENTARIO,
        P_CANTIDAD_VENDIDA,
        P_PRECIO_UNITARIO,
        P_PRECIO_TOTAL_UNITARIO
    );
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en la ejecución del procedimiento.');
        RAISE;
END FIDE_DETALLES_FACTURAS_AGREGAR_SP;

-----------------------eliminar detalle factura------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_DETALLES_FACTURAS_ELIMINAR_SP (
    P_ID_DETALLE IN VARCHAR2
)
AS
BEGIN
    DELETE FROM FIDE_DETALLES_FACTURAS_TB
    WHERE FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK = P_ID_DETALLE;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en la ejecución del procedimiento.');
        RAISE;
END FIDE_DETALLES_FACTURAS_ELIMINAR_SP;

-----------------------modificar detalle factura------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_DETALLES_FACTURAS_MODIFICAR_SP (
    P_ID_DETALLE IN VARCHAR2,
    P_ID_FACTURAS IN VARCHAR2,
    P_ID_ESTADOS IN VARCHAR2,
    P_ID_INVENTARIO IN VARCHAR2,
    P_CANTIDAD_VENDIDA IN INT,
    P_PRECIO_UNITARIO IN DECIMAL,
    P_PRECIO_TOTAL_UNITARIO IN DECIMAL
)
AS
BEGIN
    UPDATE FIDE_DETALLES_FACTURAS_TB
    SET 
        ID_FACTURAS = P_ID_FACTURAS,
        ID_ESTADOS = P_ID_ESTADOS,
        ID_INVENTARIO = P_ID_INVENTARIO,
        CANTIDAD_VENDIDA = P_CANTIDAD_VENDIDA,
        PRECIO_UNITARIO = P_PRECIO_UNITARIO,
        PRECIO_TOTAL_UNITARIO = P_PRECIO_TOTAL_UNITARIO
    WHERE FIDE_DETALLES_FACTURAS_TB_ID_DETALLE_PK = P_ID_DETALLE;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en la ejecución del procedimiento.');
        RAISE;
END FIDE_DETALLES_FACTURAS_MODIFICAR_SP;

-----------------------eliminar tipo descuento------------------------------------
CREATE OR REPLACE PROCEDURE FIDE_TIPO_DESCUENTO_ELIMINAR_SP (
    P_ID_TIPO_DESCUENTO IN VARCHAR2
)
AS
BEGIN
    DELETE FROM FIDE_TIPO_DESCUENTO_TB
    WHERE FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK = P_ID_TIPO_DESCUENTO;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error en la ejecución del procedimiento.');
        RAISE;
END FIDE_TIPO_DESCUENTO_ELIMINAR_SP;

--------------------------------------------FUNCIONES------------------------------------------------------------------------------

---------------------------Funcion 1 que hace filtrar los datos de un cliente conforme al nombre----------------------
CREATE OR REPLACE FUNCTION FIDE_CLIENTES_TB_FILTRAR_CLIENTES_FN(
    P_NOMBRE IN VARCHAR2
) RETURN VARCHAR2 IS
    V_RESULTADO VARCHAR2(4000);
BEGIN
    V_RESULTADO := '';

    FOR C IN (
        SELECT FIDE_CLIENTES_TB_ID_CLIENTE_PK, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, 
               ID_ESTADOS, NOMBRE, CORREO, CONTRASENA, DIRECCION, TELEFONO, ESTADO, ACCION
        FROM FIDE_CLIENTES_TB
        WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE)
        ORDER BY NOMBRE
    ) LOOP
        V_RESULTADO := V_RESULTADO || 
                       'ID Cliente: ' || C.FIDE_CLIENTES_TB_ID_CLIENTE_PK || ', ' || 'Pais: ' || C.ID_PAIS || ', ' ||
                       'Provincia: ' || C.ID_PROVINCIA || ', ' || 'Canton: ' || C.ID_CANTON || ', ' ||
                       'Distrito: ' || C.ID_DISTRITO || ', ' || 'Estado: ' || C.ID_ESTADOS || ', ' ||
                       'Nombre: ' || C.NOMBRE || ', ' || 'Correo: ' || C.CORREO || ', ' ||
                       'Contraseña: ' || C.CONTRASENA || ', ' || 'Direccion: ' || C.DIRECCION || ', ' ||
                       'Telefono: ' || C.TELEFONO || ', ' || 'Estado del Cliente: ' || C.ESTADO || ', ' ||
                       'Accion: ' || C.ACCION || ' | '; 
    END LOOP;

    IF V_RESULTADO = '' THEN
        RETURN 'No se encontraron clientes con el nombre proporcionado.';
    ELSE
        RETURN V_RESULTADO;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Ocurrio un error: ' || SQLERRM;
END FIDE_CLIENTES_TB_FILTRAR_CLIENTES_FN;
/

SELECT FIDE_CLIENTES_TB_FILTRAR_CLIENTES_FN('Esteban') FROM DUAL;
/
---------------Funcion 2 que con el id del pallet se vea el proveedor -------------

CREATE OR REPLACE FUNCTION FIDE_PALLETS_TB_OBTENER_PROVEEDOR_FN (
    P_ID_PALLET IN VARCHAR2
) RETURN VARCHAR2 IS
    v_nombre_proveedor VARCHAR2(255);
BEGIN
    SELECT FIDE_PROVEEDORES_TB.NOMBRE_PROVEEDOR
    INTO v_nombre_proveedor
    FROM FIDE_PALLETS_TB
    JOIN FIDE_PROVEEDORES_TB ON FIDE_PALLETS_TB.ID_PROVEEDORES = FIDE_PROVEEDORES_TB.FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK
    WHERE FIDE_PALLETS_TB.FIDE_PALLETS_TB_ID_PALLET_PK = P_ID_PALLET;

    RETURN v_nombre_proveedor;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Proveedor no encontrado'; 
    WHEN OTHERS THEN
        RETURN 'Error al obtener el proveedor'; 
END FIDE_PALLETS_TB_OBTENER_PROVEEDOR_FN;
/
SELECT FIDE_PALLETS_TB_OBTENER_PROVEEDOR_FN('1') FROM DUAL;
/

----------------Funcion 3  Filtrar el nombre del descuento con el id de descuento--------------------------------------

CREATE OR REPLACE FUNCTION FIDE_TIPO_DESCUENTO_TB_NOMBRE_DESCUENTO_FN(
    P_ID_TIPO_DESCUENTO IN VARCHAR2
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(255);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM FIDE_TIPO_DESCUENTO_TB
    WHERE FIDE_TIPO_DESCUENTO_TB_ID_TIPO_DESCUENTO_PK = P_ID_TIPO_DESCUENTO;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontrO el descuento';
    WHEN OTHERS THEN
        RETURN 'Error en la consulta';
END FIDE_TIPO_DESCUENTO_TB_NOMBRE_DESCUENTO_FN;
/
SELECT FIDE_TIPO_DESCUENTO_TB_NOMBRE_DESCUENTO_FN('3') FROM dual;
/

------------------------Funcion 4 con el nombre del producto se filtra la cantidad que hay-------------------------------
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_CANTIDAD_POR_NOMBRE_FN(
    P_NOMBRE IN VARCHAR2
) RETURN INT IS
    V_CANTIDAD INT;
BEGIN
    SELECT CANTIDAD
    INTO V_CANTIDAD
    FROM FIDE_INVENTARIO_TB
    WHERE NOMBRE = P_NOMBRE;

    RETURN V_CANTIDAD;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    WHEN OTHERS THEN
        RETURN NULL;
END FIDE_INVENTARIO_TB_CANTIDAD_POR_NOMBRE_FN;
/
SELECT FIDE_INVENTARIO_TB_CANTIDAD_POR_NOMBRE_FN('Armario') FROM dual;
------------------Funcion 5 que con su id se filtre los datos de la factura del id --------------------------------

CREATE OR REPLACE FUNCTION FIDE_FACTURAS_TB_DATOS_FACTURA_FN(
    P_ID_FACTURA  IN VARCHAR2
) RETURN VARCHAR2 IS
    V_FACTURA FIDE_FACTURAS_TB%ROWTYPE;  
BEGIN
    SELECT * INTO V_FACTURA
    FROM FIDE_FACTURAS_TB
    WHERE FIDE_FACTURAS_TB_ID_FACTURAS_PK = P_ID_FACTURA;

    RETURN 'Factura ID: ' || V_FACTURA.FIDE_FACTURAS_TB_ID_FACTURAS_PK ||
           ', Inventario ID: ' || V_FACTURA.ID_INVENTARIO ||
           ', Descuento ID: ' || V_FACTURA.ID_DESCUENTO ||
           ', Estado ID: ' || V_FACTURA.ID_ESTADOS ||
           ', Cliente ID: ' || V_FACTURA.ID_CLIENTE ||
           ', Promoci�n ID: ' || V_FACTURA.ID_PROMOCION ||
           ', Fecha de Venta: ' || V_FACTURA.FECHA_VENTA ||
           ', Total Venta: ' || V_FACTURA.TOTAL_VENTA ||
           ', Subtotal: ' || V_FACTURA.SUBTOTAL ||
           ', Impuestos: ' || V_FACTURA.IMPUESTOS ||
           ', Estado: ' || V_FACTURA.ESTADO;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontr� la factura con ese ID';
    WHEN OTHERS THEN
        RETURN 'Error en la consulta';
END FIDE_FACTURAS_TB_DATOS_FACTURA_FN;
/
SELECT FIDE_FACTURAS_TB_DATOS_FACTURA_FN('2') FROM dual;
/
-----------------------Funcion 6 filtra el nombre con el id del canton ---------------------
CREATE OR REPLACE FUNCTION FIDE_CANTON_TB_NOMBRE_POR_ID_FN(
    P_ID_CANTO  IN VARCHAR2
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(255);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM FIDE_CANTON_TB
    WHERE FIDE_CANTON_TB_ID_CANTON_PK = P_ID_CANTO;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontr� el cant�n con ese ID';
    WHEN OTHERS THEN
        RETURN 'Error en la consulta';
END FIDE_CANTON_TB_NOMBRE_POR_ID_FN;
/
SELECT FIDE_CANTON_TB_NOMBRE_POR_ID_FN('AT') FROM dual;
/
-----------------------Funcion 7  filtra el nombre del distrito con el id------------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_DISTRITO_TB_NOMBRE_POR_ID_FN(
    P_ID_DISTRITO  IN VARCHAR2
) RETURN VARCHAR2 IS
    V_NOMBRE VARCHAR2(255);
BEGIN
    SELECT NOMBRE
    INTO V_NOMBRE
    FROM FIDE_DISTRITO_TB
    WHERE FIDE_DISTRITO_TB_ID_DISTRITO_PK = P_ID_DISTRITO;

    RETURN V_NOMBRE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No se encontr� el distrito con ese ID';
    WHEN OTHERS THEN
        RETURN 'Error en la consulta';
END FIDE_DISTRITO_TB_NOMBRE_POR_ID_FN;
/
SELECT FIDE_DISTRITO_TB_NOMBRE_POR_ID_FN('ME') FROM dual;
/

-----------------------Funcion/cursor 8 Lista los productos disponibles con mayor cantidad de precio------------------------------------------------------

CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_PRODUCTOS_DISPONIBLES_FN(
    P_CANTIDAD_MINIMA IN INT
) RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_PRODUCTO, 
               NOMBRE AS NOMBRE_PRODUCTO, 
               CANTIDAD, 
               PRECIO
        FROM FIDE_INVENTARIO_TB
        WHERE CANTIDAD > P_CANTIDAD_MINIMA
        AND ESTADO = 'ACTIVO';

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_INVENTARIO_PRODUCTOS_DISPONIBLES_FN;
-----------------------Funcion/cursor 9 Detallar todas las facturas de un cliente------------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_FACTURAS_DETALLE_POR_CLIENTE_FN(
    P_ID_CLIENTE IN VARCHAR2
) RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA,
               FECHA_VENTA, 
               TOTAL_VENTA, 
               SUBTOTAL, 
               IMPUESTOS
        FROM FIDE_FACTURAS_TB
        WHERE ID_CLIENTE = P_ID_CLIENTE;

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_FACTURAS_DETALLE_POR_CLIENTE_FN;

-----------------------Funcion/cursor 10 Devuelve los productos de inventario relacionados con un proveedor------------------------------------------------------

CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_OBTENER_POR_PROVEEDOR_FN(
    P_ID_PROVEEDOR IN VARCHAR2
) RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_PRODUCTO,
               NOMBRE AS NOMBRE_PRODUCTO, 
               CANTIDAD, 
               PRECIO
        FROM FIDE_INVENTARIO_TB
        WHERE ID_PALLET IN (
            SELECT FIDE_PALLETS_TB_ID_PALLET_PK
            FROM FIDE_PALLETS_TB
            WHERE ID_PROVEEDORES = P_ID_PROVEEDOR
        );

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_INVENTARIO_OBTENER_POR_PROVEEDOR_FN;

-----------------------Funcion/cursor 11 Devuelve las promociones que se han aplicado a un cliente espec�fico------------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_PROMOCIONES_OBTENER_POR_CLIENTE_FN(
    P_ID_CLIENTE IN VARCHAR2
) RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT FIDE_PROMOCIONES_TB_ID_PROMOCION_PK AS ID_PROMOCION, 
               NOMBRE_PROMOCION, 
               FECHA_INICIO, 
               FECHA_FIN
        FROM FIDE_PROMOCIONES_TB
        WHERE ID_FACTURAS IN (
            SELECT FIDE_FACTURAS_TB_ID_FACTURAS_PK 
            FROM FIDE_FACTURAS_TB 
            WHERE ID_CLIENTE = P_ID_CLIENTE
        );

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_PROMOCIONES_OBTENER_POR_CLIENTE_FN;
-----------------------Funcion/cursor 12 Devuelve los descuentos que se han aplicado en facturas------------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_DESCUENTOS_LISTAR_EN_FACTURAS_FN
RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT DISTINCT D.FIDE_DESCUENTO_TB_ID_DESCUENTO_PK AS ID_DESCUENTO, 
                        D.VALOR AS VALOR_DESCUENTO, 
                        F.FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA
        FROM FIDE_DESCUENTO_TB D
        JOIN FIDE_FACTURAS_TB F ON D.FIDE_DESCUENTO_TB_ID_DESCUENTO_PK = F.ID_DESCUENTO
        WHERE D.ESTADO = 'ACTIVO';

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_DESCUENTOS_LISTAR_EN_FACTURAS_FN;
-----------------------Funcion/cursor 13 Devuelve las facturas generadas en un rango de fechas espec�fico------------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_FACTURAS_LISTAR_POR_FECHAS_FN(
    P_FECHA_INICIO IN DATE,
    P_FECHA_FIN IN DATE
) RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA,
               FECHA_VENTA, 
               TOTAL_VENTA, 
               SUBTOTAL, 
               IMPUESTOS
        FROM FIDE_FACTURAS_TB
        WHERE FECHA_VENTA BETWEEN P_FECHA_INICIO AND P_FECHA_FIN;

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_FACTURAS_LISTAR_POR_FECHAS_FN;
-----------------------Funcion/cursor 14 Devuelve los productos del inventario con precio dentro de un rango espec�fico------------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_LISTAR_POR_PRECIO_FN(
    P_PRECIO_MIN IN DECIMAL,
    P_PRECIO_MAX IN DECIMAL
) RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_INVENTARIO,
               NOMBRE AS NOMBRE_PRODUCTO,
               PRECIO
        FROM FIDE_INVENTARIO_TB
        WHERE PRECIO BETWEEN P_PRECIO_MIN AND P_PRECIO_MAX;

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_INVENTARIO_LISTAR_POR_PRECIO_FN;

-----------------------Funcion/cursor 15 Devuelve los detalles de los productos en inventario junto con los nombres de los proveedores------------------------------------------------
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_DETALLES_PROVEEDORES_FN
RETURN SYS_REFCURSOR IS
    V_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN V_CURSOR FOR
        SELECT I.FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_INVENTARIO,
               I.NOMBRE AS NOMBRE_PRODUCTO,
               I.CANTIDAD,
               I.PRECIO,
               P.NOMBRE_PROVEEDOR
        FROM FIDE_INVENTARIO_TB I
        JOIN FIDE_PALLETS_TB PA ON I.ID_PALLET = PA.FIDE_PALLETS_TB_ID_PALLET_PK
        JOIN FIDE_PROVEEDORES_TB P ON PA.ID_PROVEEDORES = P.FIDE_PROVEEDORES_TB_ID_PROVEEDORES_PK;

    RETURN V_CURSOR;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error');
        RETURN NULL;
END FIDE_INVENTARIO_DETALLES_PROVEEDORES_FN;
-------------------------------------------Cursores echos 8 hacer 7------------------------------------------------------------------------------

-----------------------procedimiento/cursor 1 listar clientes que tienen un estado espec�fico---------------------------------
CREATE OR REPLACE PROCEDURE FIDE_CLIENTES_LISTAR_POR_ESTADO_SP(
    P_ESTADO IN VARCHAR2
) IS
    CURSOR C_CLIENTES IS
        SELECT FIDE_CLIENTES_TB_ID_CLIENTE_PK AS ID_CLIENTE,
               NOMBRE, 
               CORREO, 
               TELEFONO
        FROM FIDE_CLIENTES_TB
        WHERE ESTADO = P_ESTADO;
    V_CLIENTE_ID VARCHAR2(200);
    V_NOMBRE VARCHAR2(255);
    V_CORREO VARCHAR2(255);
    V_TELEFONO VARCHAR2(20);
BEGIN
    OPEN C_CLIENTES;
    LOOP
        FETCH C_CLIENTES INTO V_CLIENTE_ID, V_NOMBRE, V_CORREO, V_TELEFONO;
        EXIT WHEN C_CLIENTES%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('ID : ' || V_CLIENTE_ID ||', Nombre: ' || V_NOMBRE || ', Correo: ' || V_CORREO || ', Tel�fono: ' || V_TELEFONO);
    END LOOP;
    CLOSE C_CLIENTES;
END FIDE_CLIENTES_LISTAR_POR_ESTADO_SP;

-----------------------procedimiento/cursor 2 lista las facturas generadas en un rango de fechas---------------------------------
CREATE OR REPLACE PROCEDURE FIDE_FACTURAS_LISTAR_POR_FECHA_SP(
    P_FECHA_INICIO IN DATE,
    P_FECHA_FIN IN DATE
) IS
    CURSOR C_FACTURAS IS
        SELECT FIDE_FACTURAS_TB_ID_FACTURAS_PK AS ID_FACTURA,
               FECHA_VENTA,
               TOTAL_VENTA,
               SUBTOTAL,
               IMPUESTOS
        FROM FIDE_FACTURAS_TB
        WHERE FECHA_VENTA BETWEEN P_FECHA_INICIO AND P_FECHA_FIN;
    V_ID_FACTURA VARCHAR2(200);
    V_FECHA_VENTA DATE;
    V_TOTAL_VENTA DECIMAL(10, 2);
    V_SUBTOTAL DECIMAL(10, 2);
    V_IMPUESTOS DECIMAL(10, 2);
BEGIN
    OPEN C_FACTURAS;
    LOOP
        FETCH C_FACTURAS INTO V_ID_FACTURA, V_FECHA_VENTA, V_TOTAL_VENTA, V_SUBTOTAL, V_IMPUESTOS;
        EXIT WHEN C_FACTURAS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Factura ID: ' || V_ID_FACTURA || ', Fecha: ' || V_FECHA_VENTA || ', Total: ' || V_TOTAL_VENTA ||  ', Subtotal: ' || V_SUBTOTAL || ', Impuestos: ' || V_IMPUESTOS);
    END LOOP;
    CLOSE C_FACTURAS;
END FIDE_FACTURAS_LISTAR_POR_FECHA_SP;

-----------------------procedimiento/cursor 3 lista las promociones activas y su rango de fechas---------------------------------
CREATE OR REPLACE PROCEDURE FIDE_PROMOCIONES_LISTAR_ACTIVAS_SP IS
    CURSOR C_PROMOCIONES IS
        SELECT FIDE_PROMOCIONES_TB_ID_PROMOCION_PK AS ID_PROMOCION,
               NOMBRE_PROMOCION,
               FECHA_INICIO,
               FECHA_FIN
        FROM FIDE_PROMOCIONES_TB
        WHERE ESTADO = 'ACTIVO';
    V_ID_PROMOCION VARCHAR2(200);
    V_NOMBRE_PROMOCION VARCHAR2(255);
    V_FECHA_INICIO DATE;
    V_FECHA_FIN DATE;
BEGIN
    OPEN C_PROMOCIONES;
    LOOP
        FETCH C_PROMOCIONES INTO V_ID_PROMOCION, V_NOMBRE_PROMOCION, V_FECHA_INICIO, V_FECHA_FIN;
        EXIT WHEN C_PROMOCIONES%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Promoci�n ID: ' || V_ID_PROMOCION || ', Nombre: ' || V_NOMBRE_PROMOCION || ', Inicio: ' || V_FECHA_INICIO || ', Fin: ' || V_FECHA_FIN);
    END LOOP;
    CLOSE C_PROMOCIONES;
END FIDE_PROMOCIONES_LISTAR_ACTIVAS_SP;
-----------------------cursor 4 productos con precio mayor a un valor---------------------------------
DECLARE
    CURSOR C_PRODUCTOS_ESPECIALES IS
        SELECT FIDE_INVENTARIO_TB_ID_INVENTARIO_PK AS ID_PRODUCTO,
               NOMBRE,
               PRECIO
        FROM FIDE_INVENTARIO_TB
        WHERE PRECIO > 100;
    V_ID_PRODUCTO VARCHAR2(200);
    V_NOMBRE VARCHAR2(255);
    V_PRECIO DECIMAL(10, 2);
BEGIN
    OPEN C_PRODUCTOS_ESPECIALES;
    LOOP
        FETCH C_PRODUCTOS_ESPECIALES INTO V_ID_PRODUCTO, V_NOMBRE, V_PRECIO;
        EXIT WHEN C_PRODUCTOS_ESPECIALES%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Producto ID: ' || V_ID_PRODUCTO || ', Nombre: ' || V_NOMBRE || ', Precio: ' || V_PRECIO);
    END LOOP;
    CLOSE C_PRODUCTOS_ESPECIALES;
END;

-----------------------procedimiento/cursor 5  lista los clientes que tienen facturas con un total mayor a un monto---------------------------------
CREATE OR REPLACE PROCEDURE FIDE_CLIENTES_FACTURAS_MAYOR_MONTO_SP(
    P_MONTO_MINIMO IN DECIMAL
) IS
    CURSOR C_CLIENTES_FACTURAS IS
        SELECT DISTINCT C.FIDE_CLIENTES_TB_ID_CLIENTE_PK AS ID_CLIENTE,
                        C.NOMBRE AS NOMBRE_CLIENTE,
                        F.TOTAL_VENTA
        FROM FIDE_CLIENTES_TB C
        JOIN FIDE_FACTURAS_TB F ON C.FIDE_CLIENTES_TB_ID_CLIENTE_PK = F.ID_CLIENTE
        WHERE F.TOTAL_VENTA > P_MONTO_MINIMO;
    V_ID_CLIENTE VARCHAR2(200);
    V_NOMBRE_CLIENTE VARCHAR2(255);
    V_TOTAL_VENTA DECIMAL(10, 2);
BEGIN
    OPEN C_CLIENTES_FACTURAS;
    LOOP
        FETCH C_CLIENTES_FACTURAS INTO V_ID_CLIENTE, V_NOMBRE_CLIENTE, V_TOTAL_VENTA;
        EXIT WHEN C_CLIENTES_FACTURAS%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Cliente ID: ' || V_ID_CLIENTE || ', Nombre: ' || V_NOMBRE_CLIENTE || ', Total Venta: ' || V_TOTAL_VENTA);
    END LOOP;
    CLOSE C_CLIENTES_FACTURAS;
END FIDE_CLIENTES_FACTURAS_MAYOR_MONTO_SP;

-----------------------cursor 6  Lista todas las promociones que est�n activas---------------------------------
DECLARE
    CURSOR C_PROMOCIONES IS
        SELECT FIDE_PROMOCIONES_TB_ID_PROMOCION_PK AS ID_PROMOCION,
               NOMBRE_PROMOCION,
               FECHA_INICIO,
               FECHA_FIN
        FROM FIDE_PROMOCIONES_TB
        WHERE ESTADO = 'ACTIVO';
    V_ID_PROMOCION VARCHAR2(200);
    V_NOMBRE_PROMOCION VARCHAR2(255);
    V_FECHA_INICIO DATE;
    V_FECHA_FIN DATE;
BEGIN
    OPEN C_PROMOCIONES;
    LOOP
        FETCH C_PROMOCIONES INTO V_ID_PROMOCION, V_NOMBRE_PROMOCION, V_FECHA_INICIO, V_FECHA_FIN;
        EXIT WHEN C_PROMOCIONES%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Promoci�n ID: ' || V_ID_PROMOCION || ', Nombre: ' || V_NOMBRE_PROMOCION || ', Inicio: ' || V_FECHA_INICIO || ', Fin: ' || V_FECHA_FIN);
    END LOOP;
    CLOSE C_PROMOCIONES;
END;

-----------------------cursor 7  Lista todos los clientes que no tienen ninguna factura asociada---------------------------------
DECLARE
    CURSOR C_CLIENTES_SIN_FACTURAS IS
        SELECT FIDE_CLIENTES_TB_ID_CLIENTE_PK AS ID_CLIENTE,
               NOMBRE AS NOMBRE_CLIENTE,
               CORREO
        FROM FIDE_CLIENTES_TB
        WHERE FIDE_CLIENTES_TB_ID_CLIENTE_PK NOT IN (
            SELECT ID_CLIENTE 
            FROM FIDE_FACTURAS_TB
        );
    V_ID_CLIENTE VARCHAR2(200);
    V_NOMBRE_CLIENTE VARCHAR2(255);
    V_CORREO VARCHAR2(255);
BEGIN
    OPEN C_CLIENTES_SIN_FACTURAS;
    LOOP
        FETCH C_CLIENTES_SIN_FACTURAS INTO V_ID_CLIENTE, V_NOMBRE_CLIENTE, V_CORREO;
        EXIT WHEN C_CLIENTES_SIN_FACTURAS%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Cliente ID: ' || V_ID_CLIENTE || ', Nombre: ' || V_NOMBRE_CLIENTE || ', Correo: ' || V_CORREO);
    END LOOP;
    CLOSE C_CLIENTES_SIN_FACTURAS;
END;
--------------------------------------------PAQUETES--------------------------------------------

---------------------------------PAQUETES PROCEDIMIENTO---------------------------------
CREATE OR REPLACE PACKAGE FIDE_SUMASTORECR_PROCEDIMIENTOS_PKG AS

END FIDE_SUMASTORECR_PROCEDIMIENTOS_PKG;

CREATE OR REPLACE PACKAGE BODY FIDE_SUMASTORECR_PROCEDIMIENTOS_PKG AS
---------ACA INICIAN LOS PROCEDIMIENTOS---------
---------PROCEDIMIENTO PARA CREAR CLIENTE EN LA TABLA FIDE_CLIENTES---------
PROCEDURE FIDE_CLIENTES_TB_INSERTAR_CLIENTE_SP (
    V_NOMBRE IN VARCHAR2,
    V_CORREO IN VARCHAR2,
    V_CONTRASEÑA IN VARCHAR2,
    V_TELEFONO IN VARCHAR2
) AS
BEGIN
    INSERT INTO FIDE_CLIENTES_TB (NOMBRE, CORREO, CONTRASEÑA, TELEFONO)
    VALUES (V_NOMBRE, V_CORREO, V_CONTRASEÑA, V_TELEFONO);

    COMMIT;
END;
END FIDE_SUMASTORECR_PROCEDIMIENTOS_PKG;

---------------------------------PAQUETES FUNCIONES---------------------------------
CREATE OR REPLACE PACKAGE FIDE_SUMASTORECR_FUNCIONES_PKG AS

END FIDE_SUMASTORECR_FUNCIONES_PKG;

CREATE OR REPLACE PACKAGE BODY FIDE_SUMASTORECR_FUNCIONES_PKG AS
---------ACA INICIAN LAS FUNCIONES---------
---------PROCEDIMIENTO PARA CREAR CLIENTE EN LA TABLA FIDE_CLIENTES---------
FUNCTION FIDE_CLIENTES_TB_FILTRAR_CLIENTES_FN(
    P_NOMBRE IN VARCHAR2
) RETURN VARCHAR2 IS
    V_RESULTADO VARCHAR2(4000);
BEGIN
    V_RESULTADO := '';
    FOR C IN (
        SELECT FIDE_CLIENTES_TB_ID_CLIENTE_PK, ID_PAIS, ID_PROVINCIA, ID_CANTON, ID_DISTRITO, 
               ID_ESTADOS, NOMBRE, CORREO, CONTRASEÑA, DIRECCION, TELEFONO, ESTADO, ACCION
        FROM FIDE_CLIENTES_TB
        WHERE UPPER(NOMBRE) = UPPER(P_NOMBRE)
        ORDER BY NOMBRE
    ) LOOP
        V_RESULTADO := V_RESULTADO || 
                       'ID Cliente: ' || C.FIDE_CLIENTES_TB_ID_CLIENTE_PK || ', ' || 'Pais: ' || C.ID_PAIS || ', ' ||
                       'Provincia: ' || C.ID_PROVINCIA || ', ' || 'Canton: ' || C.ID_CANTON || ', ' ||
                       'Distrito: ' || C.ID_DISTRITO || ', ' || 'Estado: ' || C.ID_ESTADOS || ', ' ||
                       'Nombre: ' || C.NOMBRE || ', ' || 'Correo: ' || C.CORREO || ', ' ||
                       'Contraseña: ' || C.CONTRASEÑA || ', ' || 'Direccion: ' || C.DIRECCION || ', ' ||
                       'Telefono: ' || C.TELEFONO || ', ' || 'Estado del Cliente: ' || C.ESTADO || ', ' ||
                       'Accion: ' || C.ACCION || ' | '; 
    END LOOP;
    IF V_RESULTADO = '' THEN
        RETURN 'No se encontraron clientes con el nombre proporcionado.';
    ELSE
        RETURN V_RESULTADO;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Ocurrio un error: ' || SQLERRM;
END FIDE_CLIENTES_TB_FILTRAR_CLIENTES_FN;
END FIDE_SUMASTORECR_FUNCIONES_PKG;

SELECT * FROM FIDE_INVENTARIO_TB;


